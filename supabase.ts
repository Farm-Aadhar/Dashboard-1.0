// This file is generated by a tool and should not be edited manually.
// It provides TypeScript types for your Supabase database schema.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export interface Database {
  public: {
    Tables: {
      user_profiles: {
        Row: {
          user_id: string;
          name: string | null;
          email: string | null;
          role: string | null;
          preferred_language: string | null;
          theme: string | null;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          user_id: string;
          name?: string | null;
          email?: string | null;
          role?: string | null;
          preferred_language?: string | null;
          theme?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          user_id?: string;
          name?: string | null;
          email?: string | null;
          role?: string | null;
          preferred_language?: string | null;
          theme?: string | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [];
      };
      node_metadata: {
        Row: {
          node_id: string;
          node_name: string;
          location: string | null;
          last_active_timestamp: string | null;
        };
        Insert: {
          node_id: string;
          node_name: string;
          location?: string | null;
          last_active_timestamp?: string | null;
        };
        Update: {
          node_id?: string;
          node_name?: string;
          location?: string | null;
          last_active_timestamp?: string | null;
        };
        Relationships: [];
      };
      sensor_readings: {
        Row: {
          id: string;
          node_id: string;
          temperature: number | null;
          humidity: number | null;
          soil_moisture: number | null;
          air_quality_mq135: number | null;
          alcohol_mq3: number | null;
          smoke_mq2: number | null;
          timestamp: string | null;
        };
        Insert: {
          id?: string;
          node_id: string;
          temperature?: number | null;
          humidity?: number | null;
          soil_moisture?: number | null;
          air_quality_mq135?: number | null;
          alcohol_mq3?: number | null;
          smoke_mq2?: number | null;
          timestamp?: string | null;
        };
        Update: {
          id?: string;
          node_id?: string;
          temperature?: number | null;
          humidity?: number | null;
          soil_moisture?: number | null;
          air_quality_mq135?: number | null;
          alcohol_mq3?: number | null;
          smoke_mq2?: number | null;
          timestamp?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "sensor_readings_node_id_fkey";
            columns: ["node_id"];
            isOneToOne: false;
            referencedRelation: "node_metadata";
            referencedColumns: ["node_id"];
          }
        ];
      };
      ai_suggestions: {
        Row: {
          id: string;
          user_id: string | null;
          node_id: string | null;
          suggestion_text: string;
          category: string | null;
          image_url: string | null;
          timestamp: string | null;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          node_id?: string | null;
          suggestion_text: string;
          category?: string | null;
          image_url?: string | null;
          timestamp?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          node_id?: string | null;
          suggestion_text?: string;
          category?: string | null;
          image_url?: string | null;
          timestamp?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "ai_suggestions_node_id_fkey";
            columns: ["node_id"];
            isOneToOne: false;
            referencedRelation: "node_metadata";
            referencedColumns: ["node_id"];
          },
          {
            foreignKeyName: "ai_suggestions_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "user_profiles";
            referencedColumns: ["user_id"];
          }
        ];
      };
      farm_tasks: {
        Row: {
          id: string;
          user_id: string | null;
          task_description: string;
          due_date: string | null;
          is_completed: boolean | null;
          priority: string | null;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          task_description: string;
          due_date?: string | null;
          is_completed?: boolean | null;
          priority?: string | null;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          task_description?: string;
          due_date?: string | null;
          is_completed?: boolean | null;
          priority?: string | null;
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "farm_tasks_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "user_profiles";
            referencedColumns: ["user_id"];
          }
        ];
      };
      alerts: {
        Row: {
          id: string;
          user_id: string | null;
          node_id: string | null;
          message: string;
          severity: string | null;
          is_read: boolean | null;
          timestamp: string | null;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          node_id?: string | null;
          message: string;
          severity?: string | null;
          is_read?: boolean | null;
          timestamp?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          node_id?: string | null;
          message?: string;
          severity?: string | null;
          is_read?: boolean | null;
          timestamp?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "alerts_node_id_fkey";
            columns: ["node_id"];
            isOneToOne: false;
            referencedRelation: "node_metadata";
            referencedColumns: ["node_id"];
          },
          {
            foreignKeyName: "alerts_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "user_profiles";
            referencedColumns: ["user_id"];
          }
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
}
